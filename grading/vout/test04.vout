==1136== Memcheck, a memory error detector
==1136== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1136== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1136== Command: test04
==1136== Parent PID: 1135
==1136== 
==1136== Invalid write of size 4
==1136==    at 0x401288: Student::makeSegfault() (Student.cpp:24)
==1136==    by 0x4010C5: main (test04.cpp:15)
==1136==  Address 0x1001ef7994 is not stack'd, malloc'd or (recently) free'd
==1136== 
==1136== 
==1136== Process terminating with default action of signal 11 (SIGSEGV)
==1136==  Access not within mapped region at address 0x1001EF7994
==1136==    at 0x401288: Student::makeSegfault() (Student.cpp:24)
==1136==    by 0x4010C5: main (test04.cpp:15)
==1136==  If you believe this happened as a result of a stack
==1136==  overflow in your program's main thread (unlikely but
==1136==  possible), you can try to increase the size of the
==1136==  main thread stack using the --main-stacksize= flag.
==1136==  The main thread stack size used in this run was 8388608.
==1136== 
==1136== HEAP SUMMARY:
==1136==     in use at exit: 72,708 bytes in 2 blocks
==1136==   total heap usage: 2 allocs, 0 frees, 72,708 bytes allocated
==1136== 
==1136== LEAK SUMMARY:
==1136==    definitely lost: 0 bytes in 0 blocks
==1136==    indirectly lost: 0 bytes in 0 blocks
==1136==      possibly lost: 0 bytes in 0 blocks
==1136==    still reachable: 72,708 bytes in 2 blocks
==1136==         suppressed: 0 bytes in 0 blocks
==1136== Rerun with --leak-check=full to see details of leaked memory
==1136== 
==1136== For counts of detected and suppressed errors, rerun with: -v
==1136== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
